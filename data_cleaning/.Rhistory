"wichita.csv",
"tulsa.csv",
"flagstaff.csv",
"cheyenne (wyoming).csv",
"atlanta.csv",
"las vegas.csv",
"riverside.csv",
"waco (texas).csv",
"albuquerque.csv")
stopifnot(length(cities) == 32)
# Read city data into a list
DATA_PATH <- file.path("C:/Users/kevoi/OneDrive/Desktop/School/Year 3/POLI SCI 200C/final_project/data") # change path if needed
FULL_PATHS <- file.path(DATA_PATH, cities)
# getting city names to add city column to data
city_names <- tools::file_path_sans_ext(basename(cities))  # removes ".csv"
city_names <- str_replace_all(city_names, "\\s*\\(.*?\\)", "") |> str_to_title() # Note: this removes the (state)
data_list <- mapply(function(file, city) {
df <- read_csv(file, col_types = cols(
Year = col_character(),
Month = col_character(),
Value = col_double()
))
df$city <- city
df
}, FULL_PATHS, city_names, SIMPLIFY = FALSE)
data <- bind_rows(data_list)
# Checking NA values
data$Year |> is.na() |> sum()
data$Month |> is.na() |> sum()
data$Value |> is.na() |> sum() # Normal to have NA values in 2025
data |> filter(is.na(Value) & Year != "2025")
data$city |> is.na() |> sum()
# Filter data to between Nov 2020 and Jan 2025
filtered_data <- data %>%
mutate(
month_date = my(paste(Month, Year))
) %>%
filter(month_date >= ymd("2020-11-01") & month_date <= ymd("2025-01-31"))
filtered_data$Year |> is.na() |> sum()
filtered_data$Month |> is.na() |> sum()
filtered_data$Value |> is.na() |> sum() # Normal to have NA values in 2025
filtered_data |> filter(is.na(Value) & Year != "2025")
filtered_data$city |> is.na() |> sum()
glimpse(filtered_data)
# create binary variables for treated and time
# treated = 1 if the city is the treated state (Albuquerque) in the posttreatment period and 0 otherwise
# time = YYYYMM
filtered_data <- filtered_data |>
mutate(
time_period = as.numeric(Year) * 100 + match(Month, month.abb),
treated = ifelse(city == "Albuquerque" & time_period >= 202201, 1, 0)
)
# output data to csv
write_csv(filtered_data, "city_data.csv")
result <- tjbal(Value~treated+time, data = filtered_data, index = c("city", "time_period"))
result <- tjbal(Value~treated+time_period, data = filtered_data, index = c("city", "time_period"))
filtered_data |> time_period()
filtered_data |> pull(time_period)
filtered_data |> pull(time_period) |> str()
result <- tjbal(Value~treated+time_period, data = filtered_data, index = c("city", "time_period"))
filtered_data$time_period <- as.numeric(filtered_data$time_period)
result <- tjbal(Value~treated+time_period, data = filtered_data, index = c("city", "time_period"))
filtered_data |> pull(time_period)
result <- tjbal(Value~treated+time_period, data = filtered_data,
index = c("city", "time_period"))
# output data to csv
write_csv(filtered_data, "city_data.csv")
?tjbal
# testing viability of data
result <- tjbal(Value~treated+time_period, data = filtered_data,
index = c("city", "time_period"),
estimator = "mean")
result
# testing viability of data
result <- tjbal(Value~treated+time_period, data = filtered_data,
index = c("city", "time_period"),
estimator = "mean")
is.numeric(data[,time_period])==FALSE
is.numeric(filtered_data[,time_period])==FALSE
is.numeric(filtered_data[,"time_period"])==FALSE
is.numeric(filtered_data[,"time_period"])
is.numeric(filtered_data[,"time_period"])
```{r}
filtered_data[,"time_period"]
is.numeric(filtered_data[,"time_period"])
iltered_data[,"time_period"]
filtered_data[,"time_period"]
is.numeric(filtered_data$time_period)
# output data to csv
write_csv(filtered_data, "city_data.csv")
# testing viability of data
result <- tjbal(Value~treated+time_period, data = filtered_data,
index = c("city", "time_period"),
estimator = "mean")
library(tidyverse)
library(readr)
library(lubridate)
library(tjbal)
## for plotting
require(ggplot2)
## for parallel computing
require(foreach)
require(doParallel)
require(parallel)
## for data manipulation
require(plyr)
cities <- c("austin.csv",
"bakersfield.csv",
"billings (montana).csv",
"casper (wyoming).csv",
"dallas.csv",
"el paso.csv",
"farmington (new mexico).csv",
"grand junction (colorado).csv",
"houston.csv",
"lawton (oklahoma).csv",
"louisville.csv",
"lubbock (texas).csv",
"memphis.csv",
"midland (texas).csv",
"nashville.csv",
"odessa (texas).csv",
"phoenix.csv",
"reno.csv",
"sacramento.csv",
"san antonio.csv",
"sierra vista (arizona).csv",
"spokane (washington).csv",
"wichita falls (texas).csv",
"wichita.csv",
"tulsa.csv",
"flagstaff.csv",
"cheyenne (wyoming).csv",
"atlanta.csv",
"las vegas.csv",
"riverside.csv",
"waco (texas).csv",
"albuquerque.csv")
stopifnot(length(cities) == 32)
# Read city data into a list
DATA_PATH <- file.path("C:/Users/kevoi/OneDrive/Desktop/School/Year 3/POLI SCI 200C/final_project/data") # change path if needed
FULL_PATHS <- file.path(DATA_PATH, cities)
# getting city names to add city column to data
city_names <- tools::file_path_sans_ext(basename(cities))  # removes ".csv"
city_names <- str_replace_all(city_names, "\\s*\\(.*?\\)", "") |> str_to_title() # Note: this removes the (state)
data_list <- mapply(function(file, city) {
df <- read_csv(file, col_types = cols(
Year = col_character(),
Month = col_character(),
Value = col_double()
))
df$city <- city
df
}, FULL_PATHS, city_names, SIMPLIFY = FALSE)
data <- bind_rows(data_list)
# Checking NA values
data$Year |> is.na() |> sum()
data$Month |> is.na() |> sum()
data$Value |> is.na() |> sum() # Normal to have NA values in 2025
data |> filter(is.na(Value) & Year != "2025")
data$city |> is.na() |> sum()
# Filter data to between Nov 2020 and Jan 2025
filtered_data <- data %>%
mutate(
month_date = my(paste(Month, Year))
) %>%
filter(month_date >= ymd("2020-11-01") & month_date <= ymd("2022-12-31"))
filtered_data$Year |> is.na() |> sum()
filtered_data$Month |> is.na() |> sum()
filtered_data$Value |> is.na() |> sum() # Normal to have NA values in 2025
filtered_data |> filter(is.na(Value) & Year != "2025")
filtered_data$city |> is.na() |> sum()
glimpse(filtered_data)
# create binary variables for treated and time
# treated = 1 if the city is the treated state (Albuquerque) in the posttreatment period and 0 otherwise
# time = YYYYMM
filtered_data <- filtered_data |>
mutate(
time_period = as.numeric(Year) * 100 + match(Month, month.abb),
treated = ifelse(city == "Albuquerque" & time_period >= 202201, 1, 0)
)
filtered_data$time_period <- as.numeric(filtered_data$time_period)
# output data to csv
write_csv(filtered_data, "city_data.csv")
# testing viability of data
result <- tjbal(Value~treated+time_period, data = filtered_data,
index = c("city", "time_period"),
estimator = "mean")
library(tidyverse)
library(tjbal)
library(tjbal)
library(dplyr)
library(ggplot2)
options(scipen = 999)
city_data <- read.csv("city_data.csv")
city_data <- city_data[city_data$time_period <= 202212,]
city_data$period_index <- match(city_data$time_period, sort(unique(city_data$time_period)))
result <- tjbal(data = city_data, Y = "Value", D = "treated",
index = c("city", "period_index"), Y.match.npre = 14)
synthetic_vs_treatment <- plot(result, type = "ct")
att_over_time <- plot(result)
##Plot all cities unemployment rates
treated_city <- city_data %>%
filter(treated == 1) %>%
pull(city) %>%
unique()
# Label treated vs control for plotting
plot_df <- city_data %>%
mutate(group = ifelse(city == treated_city, "Treated", "Control"))
# Plot
all_cities <- ggplot(plot_df, aes(x = period_index, y = Value, group = city, color = group)) +
geom_line(alpha = 0.6) +
scale_color_manual(values = c("gray", "red")) +
labs(title = paste("Treated Unit (", treated_city, ") vs. All Controls"),
x = "Time Period", y = "Outcome Value") +
theme_minimal()
all_cities
# Read in data
DATA_PATH <- file.path("C:/Users/kevoi/OneDrive/Desktop/School/Year 3/POLI SCI 200C/final_project/data_cleaning", "city_data.csv")
city_data <- read_csv(DATA_PATH)
city_data
library(panelview)
devtools::install_github('xuyiqing/panelview')
city_data force = TRUE
devtools::install_github('xuyiqing/panelview', force = TRUE)
library(tidyverse)
library(tjbal)
library(panelview)
library(tidyverse)
library(tjbal)
library(panelView)
city_data
# add period_index
city_data$period_index <- match(city_data$time_period, sort(unique(city_data$time_period)))
city_data
panelview(Value ~ treated, data = city_data,
index = c("city","period_index"), xlab = "Year", ylab = "Firm ID",
axis.lab.gap = c(0,1), by.timing = TRUE)
?tjbal
# Visualizing Cities and Treatment Status
panelview(Value ~ treated, data = city_data,
index = c("city","period_index"), xlab = "Year", ylab = "Firm ID",
axis.lab.gap = c(0,1), by.timing = TRUE)
# Visualizing Cities and Treatment Status
panelview(Value ~ treated, data = city_data,
index = c("city","period_index"), xlab = "Time Period",
ylab = "City", axis.lab.gap = c(0,1), by.timing = TRUE)
out.mbal <- tjbal(Value ~ treated, data = city_data,
index = c("city","period_index"), demean = FALSE, estimator = "mean"
)
out.mbal <- tjbal(Value ~ treated, data = city_data,
index = c("city","period_index"), demean = FALSE, estimator = "mean",
Y.match.npre = 14
)
result <- tjbal(data = city_data, Y = "Value", D = "treated",
index = c("city", "period_index"), Y.match.npre = 14)
result
result <- tjbal(data = city_data, Y = "Value", D = "treated",
index = c("city", "period_index"), Y.match.npre = 14)
library(tidyverse)
library(tjbal)
library(panelView)
# Read in data
DATA_PATH <- file.path("C:/Users/kevoi/OneDrive/Desktop/School/Year 3/POLI SCI 200C/final_project/data_cleaning", "city_data.csv")
city_data <- read_csv(DATA_PATH)
# add period_index
city_data$period_index <- match(city_data$time_period, sort(unique(city_data$time_period)))
# Visualizing Cities and Treatment Status
panelview(Value ~ treated, data = city_data,
index = c("city","period_index"), xlab = "Time Period",
ylab = "City", axis.lab.gap = c(0,1), by.timing = TRUE)
# out.mbal <- tjbal(Value ~ treated, data = city_data,
#   index = c("city","period_index"), demean = FALSE, estimator = "mean",
#   Y.match.npre = 14
#   )
result <- tjbal(data = city_data, Y = "Value", D = "treated",
index = c("city", "period_index"), Y.match.npre = 14)
library(tjbal)
library(dplyr)
library(ggplot2)
options(scipen = 999)
city_data <- read.csv("city_data.csv")
city_data <- city_data[city_data$time_period <= 202212,]
city_data$period_index <- match(city_data$time_period, sort(unique(city_data$time_period)))
result <- tjbal(data = city_data, Y = "Value", D = "treated",
index = c("city", "period_index"), Y.match.npre = 14)
library(tidyverse)
library(tjbal)
library(panelView)
# Read in data
DATA_PATH <- file.path("C:/Users/kevoi/OneDrive/Desktop/School/Year 3/POLI SCI 200C/final_project/data_cleaning", "city_data.csv")
city_data <- read_csv(DATA_PATH)
# add period_index
city_data$period_index <- match(city_data$time_period, sort(unique(city_data$time_period)))
# Visualizing Cities and Treatment Status
panelview(Value ~ treated, data = city_data,
index = c("city","period_index"), xlab = "Time Period",
ylab = "City", axis.lab.gap = c(0,1), by.timing = TRUE)
# out.mbal <- tjbal(Value ~ treated, data = city_data,
#   index = c("city","period_index"), demean = FALSE, estimator = "mean",
#   Y.match.npre = 14
#   )
result <- tjbal(data = city_data, Y = "Value", D = "treated",
index = c("city", "period_index"), Y.match.npre = 14)
result <- tjbal(data = city_data, Y = "Value", D = "treated",
index = c("city", "period_index"), Y.match.npre = 14)
library(tjbal)
library(dplyr)
library(ggplot2)
options(scipen = 999)
city_data <- read.csv("city_data.csv")
city_data <- city_data[city_data$time_period <= 202212,]
city_data$period_index <- match(city_data$time_period, sort(unique(city_data$time_period)))
result <- tjbal(data = city_data, Y = "Value", D = "treated",
index = c("city", "period_index"), Y.match.npre = 14)
# out.mbal <- tjbal(Value ~ treated, data = city_data,
#   index = c("city","period_index"), demean = FALSE, estimator = "mean",
#   Y.match.npre = 14
#   )
result <- tjbal(data = city_data, Y = "Value", D = "treated",
index = c("city", "period_index"), Y.match.npre = 14)
library(tidyverse)
library(tjbal)
library(panelView)
# Read in data
DATA_PATH <- file.path("C:/Users/kevoi/OneDrive/Desktop/School/Year 3/POLI SCI 200C/final_project/data_cleaning", "city_data.csv")
city_data <- read_csv(DATA_PATH)
# add period_index
city_data$period_index <- match(city_data$time_period, sort(unique(city_data$time_period)))
# Visualizing Cities and Treatment Status
panelview(Value ~ treated, data = city_data,
index = c("city","period_index"), xlab = "Time Period",
ylab = "City", axis.lab.gap = c(0,1), by.timing = TRUE)
# out.mbal <- tjbal(Value ~ treated, data = city_data,
#   index = c("city","period_index"), demean = FALSE, estimator = "mean",
#   Y.match.npre = 14
#   )
result <- tjbal(data = city_data, Y = "Value", D = "treated",
index = c("city", "period_index"), Y.match.npre = 14)
# Read in data
DATA_PATH <- file.path("C:/Users/kevoi/OneDrive/Desktop/School/Year 3/POLI SCI 200C/final_project/data_cleaning", "city_data.csv")
city_data <- read.csv(DATA_PATH)
# add period_index
city_data$period_index <- match(city_data$time_period, sort(unique(city_data$time_period)))
# Visualizing Cities and Treatment Status
panelview(Value ~ treated, data = city_data,
index = c("city","period_index"), xlab = "Time Period",
ylab = "City", axis.lab.gap = c(0,1), by.timing = TRUE)
# out.mbal <- tjbal(Value ~ treated, data = city_data,
#   index = c("city","period_index"), demean = FALSE, estimator = "mean",
#   Y.match.npre = 14
#   )
result <- tjbal(data = city_data, Y = "Value", D = "treated",
index = c("city", "period_index"), Y.match.npre = 14)
library(tidyverse)
library(tjbal)
library(panelView)
# Read in data
DATA_PATH <- file.path("C:/Users/kevoi/OneDrive/Desktop/School/Year 3/POLI SCI 200C/final_project/data_cleaning", "city_data.csv")
city_data <- read.csv(DATA_PATH)
# add period_index
city_data$period_index <- match(city_data$time_period, sort(unique(city_data$time_period)))
# Visualizing Cities and Treatment Status
panelview(Value ~ treated, data = city_data,
index = c("city","period_index"), xlab = "Time Period",
ylab = "City", axis.lab.gap = c(0,1), by.timing = TRUE)
# out.mbal <- tjbal(Value ~ treated, data = city_data,
#   index = c("city","period_index"), demean = FALSE, estimator = "mean",
#   Y.match.npre = 14
#   )
result <- tjbal(data = city_data, Y = "Value", D = "treated",
index = c("city", "period_index"), Y.match.npre = 14)
out.mbal <- tjbal(Value ~ treated, data = city_data,
index = c("city","period_index"), demean = FALSE, estimator = "mean",
Y.match.npre = 14
)
out.mbal <- tjbal(Value ~ treated, data = city_data,
index = c("city","period_index"), demean = FALSE, estimator = "mean",
Y.match.npre = 14
)
# result <- tjbal(data = city_data, Y = "Value", D = "treated",
#       index = c("city", "period_index"), Y.match.npre = 14)
out.mbal <- tjbal(Value ~ treated, data = city_data,
index = c("city","period_index"), demean = FALSE, estimator = "mean",
Y.match.npre = 14
)
# result <- tjbal(data = city_data, Y = "Value", D = "treated",
#       index = c("city", "period_index"), Y.match.npre = 14)
out.mbal
# Read in data
DATA_PATH <- file.path("C:/Users/kevoi/OneDrive/Desktop/School/Year 3/POLI SCI 200C/final_project/data_cleaning", "city_data.csv")
city_data <- read_csv(DATA_PATH)
# Calculate ATT
out.mbal <- tjbal(Value ~ treated, data = city_data,
index = c("city","period_index"), demean = FALSE, estimator = "mean",
Y.match.npre = 14
)
# Calculate ATT
out.mbal <- tjbal(Value ~ treated, data = city_data,
index = c("city","period_index"), demean = FALSE, estimator = "mean",
Y.match.npre = 14
)
city_data
# add period_index
city_data$period_index <- match(city_data$time_period, sort(unique(city_data$time_period)))
# Calculate ATT
out.mbal <- tjbal(Value ~ treated, data = city_data,
index = c("city","period_index"), demean = FALSE, estimator = "mean",
Y.match.npre = 14
)
# Read in data
DATA_PATH <- file.path("C:/Users/kevoi/OneDrive/Desktop/School/Year 3/POLI SCI 200C/final_project/data_cleaning", "city_data.csv")
city_data <- read_csv(DATA_PATH) |> as.dataframe()
# Read in data
DATA_PATH <- file.path("C:/Users/kevoi/OneDrive/Desktop/School/Year 3/POLI SCI 200C/final_project/data_cleaning", "city_data.csv")
city_data <- read_csv(DATA_PATH) |> as.data.frame()
# add period_index
city_data$period_index <- match(city_data$time_period, sort(unique(city_data$time_period)))
# Calculate ATT
out.mbal <- tjbal(Value ~ treated, data = city_data,
index = c("city","period_index"), demean = FALSE, estimator = "mean",
Y.match.npre = 14
)
# Raja's Code
# result <- tjbal(data = city_data, Y = "Value", D = "treated",
#       index = c("city", "period_index"), Y.match.npre = 14)
library(tjbal)
library(dplyr)
library(ggplot2)
options(scipen = 999)
city_data <- read.csv("city_data.csv")
city_data <- city_data[city_data$time_period <= 202212,]
city_data$period_index <- match(city_data$time_period, sort(unique(city_data$time_period)))
result <- tjbal(data = city_data, Y = "Value", D = "treated",
index = c("city", "period_index"), Y.match.npre = 14)
print(out.mbal)
# Calculate ATT
out.mbal <- tjbal(Value ~ treated, data = city_data,
index = c("city","period_index"), demean = FALSE, estimator = "mean",
Y.match.npre = 14, vce = "jackknife"
)
print(out.mbal)
print(out.mbal)
plot(out.mbal, type = "counterfactual", count = FALSE)
library(tjbal)
library(dplyr)
library(ggplot2)
options(scipen = 999)
city_data <- read.csv("city_data.csv")
city_data <- city_data[city_data$time_period <= 202212,]
city_data$period_index <- match(city_data$time_period, sort(unique(city_data$time_period)))
result <- tjbal(data = city_data, Y = "Value", D = "treated",
index = c("city", "period_index"), Y.match.npre = 14)
synthetic_vs_treatment <- plot(result, type = "ct")
att_over_time <- plot(result)
synthetic_vs_treatment
result
att_over_time <- plot(result)
plot(out.mbal)
# Plotting the Treated vs Counterfactual fit
plot(out.mbal, type = "ct")
plot(out.mbal)
att_over_time
# plot of weights
plot(out.mbal, type = "weights")
# plot of weights
plot(out.mbal, type = "weights")
# Calculate ATT
out.mbal <- tjbal(Value ~ treated, data = city_data,
index = c("city","period_index"), demean = FALSE, estimator = "mean",
Y.match.npre = 14,  # specify that we are matching on 14 pre-treatment outcome time periods
)
print(out.mbal)
# Calculate ATT
out.mbal <- tjbal(Value ~ treated, data = city_data,
index = c("city","period_index"), demean = FALSE, estimator = "mean",
Y.match.npre = 14  # specify that we are matching on 14 pre-treatment outcome time periods
)
print(out.mbal)
print(out.mbal)
# Calculate ATT
out.mbal <- tjbal(Value ~ treated, data = city_data,
index = c("city","period_index"), demean = FALSE, estimator = "mean",
Y.match.npre = 14,   # specify that we are matching on 14 pre-treatment outcome time periods
vce = "bootstrap"
)
print(out.mbal)
print(out.mbal)
out.mbal
# Calculate ATT
out.mbal <- tjbal(Value ~ treated, data = city_data,
index = c("city","period_index"), demean = FALSE, estimator = "mean",
Y.match.npre = 14,   # specify that we are matching on 14 pre-treatment outcome time periods
vce = "bootstrap"
)
print(out.mbal)
# Plotting the Treated vs Counterfactual fit
plot(out.mbal, type = "ct", raw = "all")
result
# Calculate ATT
out.mbal <- tjbal(Value ~ treated, data = city_data,
index = c("city","period_index"), demean = FALSE,
Y.match.npre = 14   # specify that we are matching on 14 pre-treatment outcome time periods
)
print(out.mbal)
print(out.mbal)
# Calculate ATT
out.mbal <- tjbal(Value ~ treated, data = city_data,
index = c("city","period_index"), estimator = "mean",
Y.match.npre = 14   # specify that we are matching on 14 pre-treatment outcome time periods
)
print(out.mbal)
